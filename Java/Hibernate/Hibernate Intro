
Java Hibernate
--------------

Problems with conventional/JDBC
------------------------------
	Mapping member variables to columns
		-Every column in Java class needs to be indivually mapped to db column
	Mapping relationships
		- user object has another object say address
	Handling data type conversions ( Both while saving or retriving data )
	Managing changes to the object state
	
Retrieving an object 
-------------------
	object = (Cast to ClassName)session.get(<className>.class,<primary key value>)
		
Natural vs Surrogate (Primary) key
----------------------------------
	Natural - is required and has unique value; is a user provided value such as email address, login name, etc
	Surrogate - is system generated id basically added to give a unique value to the row. 
		  - acts as identifier and doesnt has business value.
	For surrgoate keys, we can ask Hibernate to generate a surrogate key every time we do an insert.
		  - @GeneratedValue() : Hibernate will look at the last value, add 1 to it and give us a unique value 
		  - strategy=GenerationType.AUTO, Identity, Sequence, Table
	
Use Hibernate APIs to save to db
--------------------------------
	1. Create a SessionFactory - one instance per application
	   SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
	2. Create a session from SessionFactory
		Session session = sessionFactory.openSession();
	3. Use the session to save model objects
		session.beginTransaction();
		session.save(xyz);
		session.getTransaction().commit();
		session.close();

Annotations
-----------
	Position of Annotations:
		On top of field defination
		On top of getter
		
	@Entity (name="xyz") - indicates to hibernate that the dto class will form a table in db. 
						 - optionally name can be set to make it different from class name. Both table name and entity name are updated
	@Table (name="abc")  - indicates to hibernate that the dto class will form a table in db. 
						 - optionally name can be set to make it different from class name. Only table name is effected. Entity name is not modified.
	@Id - For providing primary key
	@Id @GeneratedValue(strategy=GenerationType.AUTO)
	
	@Column (name="xyz") - maps values to new name in table
	@Basic //Treated as a field that should be persisted and apply the hibernate default
		  // used to configure some other properties such as fetch and optional while still letting hibernate know to treate the fields as default
		  
	@Temporal(TemporalType.DATE)
	@Lob (can be character lob(clob) or Byte stream(blob) lob. Hibernate picks it up on basis of field datatype on which it is added.)

Embedding an Object
-------------------
	@Embedabble 	- on dto class whose object needs to be embedded is some other class.
			- Items of embedded class will show up as columns in db table in which this dto is embedded
	@Embedded	- indicates to hibernate that the member variables of embedded class need to be shown as columns of its class
	@EmbeddedId 	- special case when id is embedded. 
			- generally id in this case is user provided such as loginName, email address, etc
			- it is never a generated key.
	In case we need to modify the name of columns from calling class(say homeAddress & officeAddress), do as following:
	
	@Embedded
	@AttributeOverrides({
		@AttributeOverride( name="street", column=@Column(name="HOME_STREET_NAME") ),
		@AttributeOverride( name="pincode", column=@Column(name="HOME_PIN_CODE") ),
	})
	private Address homeAddress

Embedding Collections
---------------------
	@ElementCollection - indicates Java collections object
	@JoinTable (name="USER_ADDRESS",
				joinColumns=@JoinColumn(name="USER_ID") - update name of referrenced/join column in collection table
			) - update address of referrenced table name generated for element collection
	
	
	Add a sequence or index for Collections table
		@CollectionId - not a JPA annotation
		
		@GenericGenerator(name = "sequence-gen", strategy = "sequence") //hilo is common generator type provided by Hibernate
		@CollectionId(columns = { @Column(name="ADDRESS_ID") }, generator = "sequence-gen", type=@Type(type="long"))
		private Collection<Address> listOfAddresses = new ArrayList<Address>();
			-to have index or primary key in collections table use a collection that supports indexes such as an ArrayList. SET doesnt work here.
	
	Lazy Fetching/ Lazy initialization in Hibernate
	-----------------------------------------------
	On Hibernate only initializes the first level of (user) object and not the complete object.
	Collections and other referenced objects are only when the same are called. ie when the getter method of the referenced  objects is called.
	
