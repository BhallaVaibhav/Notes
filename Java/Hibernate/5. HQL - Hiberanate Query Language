
Query Object - V25
--------------------
Session session = sessionFactory.openSession();
org.hibernate.Query query = session.createQuery("from UserDetails"); -> Why use hibernate.Query and not persistance API ?
List<UserDetails> users = (List<UserDetails>)query.list();
session.getTransaction.commit();
session.close();

for(UserDetails u: users){
  System.out.println(u.toString());
}

How to paginate using HQL
------------------------
org.hibernate.Query query = session.createQuery("from UserDetails");
query.setFirstResult(4); // equivalent to OFFSET in SQL
query.setMaxResults(5);  // equivalent to LIMIT in SQL

Select options
-------------
org.hibernate.Query query = session.createQuery("select userName from UserDetails"); //returns list of User names from UserDetails table
org.hibernate.Query query = session.createQuery("select new map(userId, userName) from UserDetails"); //returns map of UserId & UserNames from UserDetails table
org.hibernate.Query query = session.createQuery("select max(userId) from UserDetails"); //returns max value of userId from UserDetails table

SQL injection
-------------
var minUserId = 5;
org.hibernate.Query query = session.createQuery("from UserDetails where userId > minUserId");
-> above statement has a secutiry problem is open to SQL injection attack as attacker may assign value minUserId = 5 or 1 =1

Parameter Substitution
----------------------
var minUserId = 5;
var userName = "User 10";
org.hibernate.Query query = session.createQuery("from UserDetails where userId > ? and userName = ?");
query.setInteger(0, Integer.parseInt(minUserId));
query.setString(1, userName);

Parameter Binding
----------------
var minUserId = 5;
var userName = "User 10";
org.hibernate.Query query = session.createQuery("from UserDetails where userId > :userId and userName = :userName");
query.setInteger("userId", Integer.parseInt(minUserId));
query.setString("userName", userName);

Named Query & NamedNative Query
-------------------------------
@Entity
@NamedQuery(name="UserDetails.byId",query="from UserDetails where userId= ?" )
public class UserDetails {}

From executor class,
  Query query = session.getNamedQuery("UserDetails.byId");
  query.setInteger(0, 2); //User 2

@Entity
@NamedNativeQuery(name="UserDetails.byName", query="select * from User_Details where username = ?", resultClass="UserDetails.class")
@Table(name="User_Details")
public class UserDetails {}

From executor class,
  Query query = session.getNamedQuery("UserDetails.byName");
  query.setString(0, "User 10");

Criteria API
------------
Criteria criteria = session.createCriteria(UserDetails.class);
criteria.add(Restrications.eq("userName","User 10"))
        .add(Restricatins.gt("userId",5))
OR        
criteria.add(Restrications.like("userName","%User 10%"))
        .add(Restricatins.between("userId", 5, 50))
OR
criteria.add(Restrications.or(Restrications.between("userId", 0, 3), Restrication.between("userId", 7, 10)))

Projections & Query By Example
------------------------------
Criteria criteria = session.createCriteria(UserDetails.class);
                           .setProjection(Projections.property("userId")) //pull up only the property u want and not the whole object
                           .setProjection(Projections.count("userId"))   //work with aggregation functions
                           .addOrder(Order.desc)                          //set order on projections
                           
                           
 UserDetails exampleUser = new UserDetails();
 //exampleUser.setUserId(5);  Note: Hibernate ignores 2 things when it comes to examples 
                                    1. any of the properties have value as null
                                    2. primary key values
 exmapleUser.setUserName("User 5");
 
 Example example = Example.create(exampleUser);
 //Example example = Example.create(exampleUser).enableLike();
 //Example example = Example.create(exampleUser).exludeProperty("userName"); // Incase you want to ignore a particular property to be used for search
 
 Criteria criteria = session.createCriteria(UserDetails.class)
                            .add(example);
